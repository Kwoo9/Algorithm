// dp[][0] : 오른쪽 삼각형 사용
// dp[][1] : 왼쪽 삼각형 사용
// 만들 수 있는 도형 : 왼쪽 평행사변형, 오른쪽 평행사변형, 중앙 삼각형, 가운데 마름모
// dp[][0] : 오.평
// dp[][1] : 왼.평, 중.삼, 가.마
// dp[i][0] : dp[i-1][0] + dp[i-1][1]
// 이전의 무슨값이 나왔건 무조건 하나밖에 만들 수 없음
// dp[i][1] : dp[i-1][0] * 2 + dp[i-1][1] * 3 or dp[i-1][0] + dp[i-1][1]
// 이전에 오른쪽 삼각형을 사용하여 지금의 왼쪽을 사용할 수 없고 마름모를 만들 수 있을 경우 중.삼 + 가.마 2가지 경우, 마름모를 만들 수 없는 경우 중.삼 한 뿐이므로, dp[i-1][0] * 2 or dp[i-1][0]
// 이전에 왼쪽 삼각형을 사용한 경우 지금의 왼쪽 삼각형을 사용할 수 있기에, 왼.평, 중.삼, 가.마 3가지 모두 가능
// 마름모를 만들 수 없는 경우 중.삼, 왼.평 이 가능하므로, dp[i-1][1] * 3 or dp[i-1][1] * 2

class Solution {
    public int solution(int n, int[] tops) {
        
        int dp[][] = new int[n+1][2];
        dp[0][1] = 1;
        
        int temp = 0;
        int top = 0;
        for(int i=0; i<n; i++){
            top = tops[i];
            temp = i+1;
            dp[temp][0] = (dp[i][0] + dp[i][1]) % 10007;
            
            if(top == 0){
                dp[temp][1] = (dp[i][0] + dp[i][1] * 2) % 10007;
            }
            else{
                dp[temp][1] = (dp[i][0] * 2 + dp[i][1] * 3) % 10007;
            }
        }
        
        return (dp[n][0] + dp[n][1]) % 10007;
    }
}